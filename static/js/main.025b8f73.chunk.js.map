{"version":3,"sources":["examples/Advanced.js","App.js","serviceWorker.js","index.js"],"names":["db","name","url","Advanced","useState","length","currentIndex","setCurrentIndex","lastDirection","setLastDirection","currentIndexRef","useRef","childRefs","useMemo","Array","fill","map","i","React","createRef","updateCurrentIndex","val","current","canGoBack","canSwipe","swipe","dir","a","goBack","newIndex","restoreCard","href","rel","className","character","index","ref","key","onSwipe","direction","nameToDelete","swiped","onCardLeftScreen","idx","console","log","style","backgroundImage","CloseCircleOutlined","backgroundColor","fontSize","color","padding","onClick","UndoOutlined","CheckCircleOutlined","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.025b8f73.chunk.js","sourcesContent":["import React, { useState, useMemo, useRef } from 'react'\r\n// import TinderCard from '../react-tinder-card/index'\r\nimport TinderCard from 'react-tinder-card'\r\nimport {\r\n  CheckCircleOutlined,\r\n  CloseCircleOutlined,\r\n  UndoOutlined,\r\n} from '@ant-design/icons'\r\n\r\nconst db = [\r\n  {\r\n    name: 'Richard Hendricks',\r\n    url: './img/richard.jpg'\r\n  },\r\n  {\r\n    name: 'Erlich Bachman',\r\n    url: './img/erlich.jpg'\r\n  },\r\n  {\r\n    name: 'Monica Hall',\r\n    url: './img/monica.jpg'\r\n  },\r\n  {\r\n    name: 'Jared Dunn',\r\n    url: './img/jared.jpg'\r\n  },\r\n  {\r\n    name: 'Dinesh Chugtai',\r\n    url: './img/dinesh.jpg'\r\n  }\r\n]\r\n\r\nfunction Advanced () {\r\n  const [currentIndex, setCurrentIndex] = useState(db.length - 1)\r\n  const [lastDirection, setLastDirection] = useState()\r\n  // used for outOfFrame closure\r\n  const currentIndexRef = useRef(currentIndex)\r\n\r\n  const childRefs = useMemo(\r\n    () =>\r\n      Array(db.length)\r\n        .fill(0)\r\n        .map((i) => React.createRef()),\r\n    []\r\n  )\r\n\r\n  const updateCurrentIndex = (val) => {\r\n    setCurrentIndex(val)\r\n    currentIndexRef.current = val\r\n  }\r\n\r\n  const canGoBack = currentIndex < db.length - 1\r\n\r\n  const canSwipe = currentIndex >= 0\r\n\r\n  // set last direction and decrease current index\r\n  const swiped = (direction, nameToDelete, index) => {\r\n    setLastDirection(direction)\r\n    updateCurrentIndex(index - 1)\r\n  }\r\n\r\n  const outOfFrame = (name, idx) => {\r\n    console.log(`${name} (${idx}) left the screen!`, currentIndexRef.current)\r\n    // handle the case in which go back is pressed before card goes outOfFrame\r\n    currentIndexRef.current >= idx && childRefs[idx].current.restoreCard()\r\n    // TODO: when quickly swipe and restore multiple times the same card,\r\n    // it happens multiple outOfFrame events are queued and the card disappear\r\n    // during latest swipes. Only the last outOfFrame event should be considered valid\r\n  }\r\n\r\n  const swipe = async (dir) => {\r\n    if (canSwipe && currentIndex < db.length) {\r\n      await childRefs[currentIndex].current.swipe(dir) // Swipe the card!\r\n    }\r\n  }\r\n\r\n  // increase current index and show card\r\n  const goBack = async () => {\r\n    if (!canGoBack) return\r\n    const newIndex = currentIndex + 1\r\n    updateCurrentIndex(newIndex)\r\n    await childRefs[newIndex].current.restoreCard()\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <link\r\n        href='https://fonts.googleapis.com/css?family=Damion&display=swap'\r\n        rel='stylesheet'\r\n      />\r\n      <link\r\n        href='https://fonts.googleapis.com/css?family=Alatsi&display=swap'\r\n        rel='stylesheet'\r\n      />\r\n      <h1>How It Started: 2021</h1>\r\n      <div className='cardContainer'>\r\n        {db.map((character, index) => (\r\n          <TinderCard\r\n            ref={childRefs[index]}\r\n            className='swipe'\r\n            key={character.name}\r\n            onSwipe={(dir) => swiped(dir, character.name, index)}\r\n            onCardLeftScreen={() => outOfFrame(character.name, index)}\r\n          >\r\n            <div\r\n              style={{ backgroundImage: 'url(' + character.url + ')' }}\r\n              className='card'\r\n            >\r\n              <h3>{character.name}</h3>\r\n            </div>\r\n          </TinderCard>\r\n        ))}\r\n      </div>\r\n      <div className='buttons'>\r\n        {/* <button style={{ backgroundColor: !canSwipe && '#c3c4d3' }} onClick={() => swipe('left')}>Swipe left!</button> */}\r\n        {/* <button style={{ backgroundColor: !canGoBack && '#c3c4d3' }} onClick={() => goBack()}>Undo swipe!</button> */}\r\n        {/* <button style={{ backgroundColor: !canSwipe && '#c3c4d3' }} onClick={() => swipe('right')}><CheckCircleOutlined /></button> */}\r\n        <CloseCircleOutlined \r\n          style={{ \r\n            backgroundColor: !canSwipe && '#c3c4d3',\r\n            fontSize: '60px',\r\n            color: 'red', \r\n            padding: '0.5rem'\r\n          }} \r\n          onClick={() => swipe('left')} \r\n        />\r\n        {canGoBack && <UndoOutlined \r\n          style={{ \r\n            backgroundColor: !canSwipe && '#c3c4d3',\r\n            fontSize: '60px',\r\n            color: 'blue', \r\n            padding: '0.5rem'\r\n            }} \r\n          onClick={() => goBack()} \r\n        />}\r\n        <CheckCircleOutlined \r\n          style={{ \r\n            backgroundColor: !canSwipe && '#c3c4d3',\r\n            fontSize: '60px',\r\n            color: 'green', \r\n            padding: '0.5rem'\r\n            }} \r\n          onClick={() => swipe('right')} \r\n        />\r\n      </div>\r\n      {lastDirection ? (\r\n        <h2 key={lastDirection} className='infoText'>\r\n          You swiped {lastDirection}\r\n        </h2>\r\n      ) : (\r\n        <div>\r\n        <h2 className='infoText'>\r\n          Congratulations!\r\n        </h2>\r\n        <h2 className='infoText'>\r\n          You have a new match on Tinder!\r\n        </h2>\r\n        </div>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Advanced\r\n","import React, { useState } from 'react'\r\nimport './App.css'\r\nimport Switch from 'react-ios-switch'\r\n\r\nimport Advanced from './examples/Advanced'\r\nimport Simple from './examples/Simple'\r\n\r\nfunction App () {\r\n  const [showAdvanced, setShowAdvanced] = useState(true)\r\n\r\n  return (\r\n    <div className='app'>\r\n      {/* {showAdvanced ? <Advanced /> : <Simple />} */}\r\n      {/* <Simple /> */}\r\n      <Advanced />\r\n      {/* <div className='row'>\r\n        <p style={{ color: '#fff' }}>Show advanced example</p> <Switch checked={showAdvanced} onChange={setShowAdvanced} />\r\n      </div> */}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}